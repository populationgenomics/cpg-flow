name: Test
on:
  # Building on pull-requests, manual dispatch, and pushes to main; but restricting
  # publishing only to main pushes and manual dispatch with `if`s in specific steps.
  push:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: '0.5.6'
          enable-cache: true

      - name: Install project dev dependencies
        run: uv sync --only-dev

      - name: Run unit tests
        id: runtests
        timeout-minutes: 20
        run: |
          uv run coverage run -m pytest tests --junitxml=test-execution.xml
          rc=$?
          uv run coverage xml
          echo "rc=$rc" >> $GITHUB_OUTPUT

      - name: 'Save coverage report as an Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage.xml

      - name: 'Save execution report as an Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: execution-report
          path: ./test-execution.xml

      # - name: Test Report
      #   uses: dorny/test-reporter@v1
      #   if: always()
      #   with:
      #     name: Test Results
      #     path: test-execution.xml
      #     reporter: java-junit
      #     token: ${{ secrets.GITHUB_TOKEN }}

      - name: Save badge env variables
        run: |
          echo "TEST_COUNT=$(grep -o '<testcase ' test-execution.xml | wc -l)" >> $GITHUB_ENV
          echo "TEST_PASSED=$(($(grep -o '<testcase ' test-execution.xml | wc -l) - $(grep -o '<failure ' test-execution.xml | wc -l)))" >> $GITHUB_ENV
          echo "COVERAGE=$(grep -o 'line-rate="[^"]*"' coverage.xml | head -1 | cut -d'"' -f2 | awk '{printf "%.2f", $1 * 100}')%" >> $GITHUB_ENV
          echo "COVERAGE_COLOR=$(if [ $(echo $COVERAGE | cut -d'.' -f1) -ge 80 ]; then echo 'green'; elif [ $(echo $COVERAGE | cut -d'.' -f1) -ge 50 ]; then echo 'orange'; else echo 'red'; fi)" >> $GITHUB_ENV

      - name: Test Count Badge
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          name: test-badge
          label: Tests
          status: "${{ env.TEST_PASSED }} / ${{ env.TEST_COUNT }} passed"
          color: 'green'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Coverage Badge
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          name: coverage-badge
          label: Coverage
          status: "${{ env.COVERAGE }}"
          color: "${{ env.COVERAGE_COLOR }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload BYOB badges
        uses: actions/upload-artifact@v4
        with:
          name: byob-badges
          path: ./badges

      - name: Fail if unit tests are not passing
        if: ${{ steps.runtests.outputs.rc != 0}}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Unittests failed with rc = ${{ steps.runtests.outputs.rc }}')

  sonarqube:
    name: SonarQube scan
    runs-on: ubuntu-latest
    needs: test
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      # Download the coverage report artifact
      - name: 'Download coverage and execution report'
        uses: actions/download-artifact@v4
        with:
          pattern: '*-report'

      # Perform the SonarQube scan
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Optional: Fail the job if Quality Gate is red
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
