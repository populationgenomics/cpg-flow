name: Test
on:
  push:
    branches: [main]  # Run on push to main branch
  pull_request:       # Trigger on PRs (from fork or same repo)
  workflow_dispatch:  # Allow manual triggering


jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install project dev dependencies
        run: uv sync --only-dev

      - name: Run unit tests
        id: runtests
        timeout-minutes: 20
        run: |
          uv run coverage run -m pytest tests --junitxml=test-execution.xml
          rc=$?
          uv run coverage xml
          echo "rc=$rc" >> $GITHUB_OUTPUT

      - name: 'Save coverage report as an Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage.xml

      - name: 'Save execution report as an Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: execution-report
          path: ./test-execution.xml

      - name: Fail if unit tests are not passing
        if: ${{ steps.runtests.outputs.rc != 0}}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Unittests failed with rc = ${{ steps.runtests.outputs.rc }}')

  sonarqube:
    name: SonarQube scan
    runs-on: ubuntu-latest
    needs: test
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for accurate blame and history analysis

      - name: 'Download coverage and execution report'
        uses: actions/download-artifact@v4
        with:
          pattern: '*-report'

      - name: Move downloaded reports to root
        run: |
          mv *-report/* .

      - name: Set project key
        id: project_key
        run: |
          BASE_KEY=$(grep '^sonar.projectKey=' sonar-project.properties | cut -d'=' -f2)

          if [[ -z "$BASE_KEY" ]]; then
            echo "sonar.projectKey not found in sonar-project.properties"
            exit 1
          fi

          if [[ "${{ github.ref_name }}" == "main" ]]; then
            FINAL_KEY="$BASE_KEY"
          else
            BRANCH_NAME="${{ github.head_ref }}"
            BRANCH_KEY=$(echo "$BRANCH_NAME" | tr '/' '-' | tr -cd '[:alnum:]-')
            FINAL_KEY="${BASE_KEY}-pr-${BRANCH_KEY}"
          fi

          echo "key=$FINAL_KEY" >> "$GITHUB_OUTPUT"

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_GLOBAL_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ steps.project_key.outputs.key }}
            -Dsonar.qualitygate.wait=true

      - name: Add SonarQube summary link
        run: |
          echo "### 🔍 [View SonarQube Results](${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ steps.project_key.outputs.key }})" >> $GITHUB_STEP_SUMMARY

      # Optional: Fail the job if the Quality Gate fails
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_GLOBAL_TOKEN }}
