[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cpg-flow"
description = "CPG Flow API for Hail Batch"
requires-python = ">=3.10"
readme = "README.md"
license = {"file"="LICENSE"}
dynamic = ["version"]
dependencies = [
    # "cpg-utils>=5.0.11",
    # "cyvcf2==0.30.18",
    # "analysis-runner>=2.43.3",
    # "hail==0.2.132",  # Pin Hail at CPG"s installed version
    # "networkx>=2.8.3",
    # "obonet>=0.3.1",  # for HPO parsing
    "grpcio>=1.48,<1.50",  # Avoid dependency resolution backtracking, Python 3.10 compatibility
    "grpcio-status>=1.48,<1.50",  # Avoid dependency resolution backtracking, Python 3.10 compatibility
    # "onnx",
    # "onnxruntime",
    # "skl2onnx",
    # "metamist>=6.9.0",
    # "pandas",
    # "peddy>=0.4.8",  # Avoid 0.4.7, which is incompatible
    # "pyfaidx>=0.8.1.1",
    # "fsspec",
    # "slack_sdk",
    # "elasticsearch==8.*",
    # "coloredlogs",
    # "bokeh",
    # "numpy",
    # "click",
    # "tenacity",
    # "toml",
]
classifiers=[
    "Development Status :: 3 - Alpha",
    "Environment :: Console",

    # Indicate who your project is intended for
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Bio-Informatics",

    # Pick your license as you wish
    "License :: OSI Approved :: MIT License",


    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX",
    "Operating System :: Unix",

    # Specify the Python versions you support here.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]
keywords = ["hail", "flow", "api", "bioinformatics", "genomics"]

[project.urls]
Repository = "https://github.com/populationgenomics/cpg-flow"

[project.optional-dependencies]
dev = [
    "black",
    "commitizen",
    "commitlint",
    "coverage",
    "cpg-utils>=5.0.11",
    "isort",
    "mypy",
    "pip-tools",
    "pre-commit",
    "pylint",
    "pytest",
    "pytest_mock",
    "python-semantic-release",
    "ruff",
    "tenacity",
    "twine"
]
test = [
    "pytest",
    "pytest-mock",
    "coverage",
]

[tool.setuptools]
package-dir = {"" = "src"}
# packages = [{ include = "cpg_flow" }]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
skip-string-normalization = true

[tool.isort]
py_version = 310
profile = "black"
line_length = 88
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "HAIL", "CPG", "FIRSTPARTY", "LOCALFOLDER"]
known_hail = [
    "hail",
    "hailtop",
]
# Adjust these for each repository, e.g., removing those that should be
# local rather than CPG. Also fill in extend_skip below if there are any
# subdirectories that should be ignored.
known_cpg = [
    "analysis_runner",
    "cpg_infra",
    "cpg_utils",
    "cpg_workflows",
    "gnomad",
    "hail_scripts",
    "metamist",
]

[tool.ruff]
line-length = 88

# ignore pydocstyle, flake8-boolean-trap (FBT)
# select = ["A", "B", "C",  "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]
# fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]
[tool.ruff.lint]
ignore = [
    # "ANN101",  # Missing type annotation for self in method
    # "ANN201",  # Missing return type annotation for public function
    # "E501",    # Line length too long
    # "E731",    # Do not assign a lambda expression, use a def
    # "E741",    # Ambiguous variable name
    # "G004",    # Logging statement uses f-string
    # "PLR0911", # Too many return statements
    # "PLR0912", # Too many branches
    # "PLR0913", # Too many arguments to function call
    # "PLR0915", # Too many statements
    # "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    # "PT018",   # Assertion should be broken down into multiple parts
    # "Q000",    # Single quotes found but double quotes preferred
    # "S101",    # Use of assert detected
    # "I001", # Import block is un-sorted (we use isort directly as ruff sort isn"t fully supported)
]

[tool.semantic_release]
version_variables = ["src/__init__.py:__version__"]
assets = []
build_command_env = []
commit_message = "bump: {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
repo_dir = "."
no_git_verify = false
tag_format = "v{version}"
build_command = "make build"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.branches.prerelease]
match = "alpha"
prerelease_token = "alpha"
prerelease = true

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
token = {env = "GITHUB_TOKEN"}
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_pypi = false
upload_to_test_pypi = true
upload_to_vcs_release = false
